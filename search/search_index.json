{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Apstra ServiceNow Demo # Welcome # First off, hello and welcome to the landing page for the cdot65.apstra Ansible Collection. My name is Calvin and I work in a sales capacity at Juniper Networks; I am hope that you find this collection helpful. Please refer to the table below for documentation and examples of the collection\u2019s functionality. Functionality Ansible Module Link to documentation Link to example Create a blueprint cdot65.apstra.blueprint documentation example Create a design cdot65.apstra.design documentation example Create resources cdot65.apstra.resources documentation example This page is generated automatically","title":"Homepage"},{"location":"#apstra-servicenow-demo","text":"","title":"Apstra ServiceNow Demo"},{"location":"#welcome","text":"First off, hello and welcome to the landing page for the cdot65.apstra Ansible Collection. My name is Calvin and I work in a sales capacity at Juniper Networks; I am hope that you find this collection helpful. Please refer to the table below for documentation and examples of the collection\u2019s functionality. Functionality Ansible Module Link to documentation Link to example Create a blueprint cdot65.apstra.blueprint documentation example Create a design cdot65.apstra.design documentation example Create resources cdot65.apstra.resources documentation example This page is generated automatically","title":"Welcome"},{"location":"blueprint/","text":"cdot.apstra.blueprint # blueprint # You will find all repositories related to blueprint on this page. Manage your Blueprints # This module will allow you to manage your Blueprint within Apstra. Feature set as of version 0.0.1: manage Blueprints idempotent Example # Here is a basic example of using the module to mange your resources in Apstra ``` yaml title=\u201dcdot65/apstra/tests/tests.yaml\u201d # # CREATE A BLUEPRINT # # name: \u201c### CREATE BLUEPRINT cicd_template\u201d cdot65.apstra.blueprint: define apstra server parameters # server: \u201capstra.dmz.home\u201d api_token: \u201cexample123\u201d define request # design: \u201ctwo_stage_l3clos\u201d init_type: \u201ctemplate_reference\u201d template_id: \u201cl3clos\u201d label: \u201ccicd_template\u201d define to delete or create # state: present register: blueprint ``` Data Model # If you\u2019d like to see the options available for you within the module, have a look at the data model provided below. py title=\"cdot65/apstra/plugins/module_utils/apstra/api.py\" @staticmethod def blueprint_spec(): return dict( api_token=dict( required=True, fallback=(env_fallback, ['APSTRA_API_TOKEN', 'APSTRA_API_TOKEN', 'API_TOKEN']), no_log=True, type='str' ), design=dict( required=False, type='str' ), init_type=dict( required=False, type='str' ), label=dict( required=True, type='str' ), template_id=dict( required=False, type='str' ), port=dict( required=False, type='int' ), server=dict( required=False, type='str' ), state=dict( required=True, choices=['absent', 'present'], type='str' ), validate_certs=dict( type='bool', required=False, default=False ), ) This page is automatically generated","title":"blueprint"},{"location":"blueprint/#cdotapstrablueprint","text":"","title":"cdot.apstra.blueprint"},{"location":"blueprint/#blueprint","text":"You will find all repositories related to blueprint on this page.","title":"blueprint"},{"location":"blueprint/#manage-your-blueprints","text":"This module will allow you to manage your Blueprint within Apstra. Feature set as of version 0.0.1: manage Blueprints idempotent","title":"Manage your Blueprints"},{"location":"blueprint/#example","text":"Here is a basic example of using the module to mange your resources in Apstra ``` yaml title=\u201dcdot65/apstra/tests/tests.yaml\u201d","title":"Example"},{"location":"blueprint/#_1","text":"","title":""},{"location":"blueprint/#create-a-blueprint","text":"","title":"# CREATE A BLUEPRINT"},{"location":"blueprint/#_2","text":"name: \u201c### CREATE BLUEPRINT cicd_template\u201d cdot65.apstra.blueprint:","title":""},{"location":"blueprint/#define-apstra-server-parameters","text":"server: \u201capstra.dmz.home\u201d api_token: \u201cexample123\u201d","title":"define apstra server parameters"},{"location":"blueprint/#define-request","text":"design: \u201ctwo_stage_l3clos\u201d init_type: \u201ctemplate_reference\u201d template_id: \u201cl3clos\u201d label: \u201ccicd_template\u201d","title":"define request"},{"location":"blueprint/#define-to-delete-or-create","text":"state: present register: blueprint ```","title":"define to delete or create"},{"location":"blueprint/#data-model","text":"If you\u2019d like to see the options available for you within the module, have a look at the data model provided below. py title=\"cdot65/apstra/plugins/module_utils/apstra/api.py\" @staticmethod def blueprint_spec(): return dict( api_token=dict( required=True, fallback=(env_fallback, ['APSTRA_API_TOKEN', 'APSTRA_API_TOKEN', 'API_TOKEN']), no_log=True, type='str' ), design=dict( required=False, type='str' ), init_type=dict( required=False, type='str' ), label=dict( required=True, type='str' ), template_id=dict( required=False, type='str' ), port=dict( required=False, type='int' ), server=dict( required=False, type='str' ), state=dict( required=True, choices=['absent', 'present'], type='str' ), validate_certs=dict( type='bool', required=False, default=False ), ) This page is automatically generated","title":"Data Model"},{"location":"design/","text":"cdot.apstra.design # design # You will find all repositories related to design on this page. Manage your designs # This module will allow you to manage your design elements within Apstra. Feature set as of version 0.0.1: manage Logical Devices, Rack Types, Templates, Intereface Mapping idempotent Supported resources # Suported Resources: Design Element type Interface Mapping interface-maps Logical Device logical-devices Rack Types rack-types Templates templates Example # Here is a basic example of using the module to mange your designs in Apstra ``` yaml title=\u201dcdot65/apstra/tests/tests.yaml\u201d # # # CREATE DESIGN PLAY # # hosts: localhost gather_facts: False become: False tasks: ### ################################################################# ### # AUTHENTICATE AND RECEIVE AN API TOKEN FROM THE APSTRA SERVER ### ################################################################# name: retrieve an API token for our session ansible.builtin.uri: url: https://apstra.dmz.home/api/user/login method: POST headers: Content-Type: application/json status_code: 201 validate_certs: False body_format: json body: username: apstra password: apstra123 register: api_token name: create \u2018api_token\u2019 object by setting it equal to value in response ansible.builtin.set_fact: api_token: \u201cexample123\u201d # # CREATE A NEW LOGICAL DEVICE ON APSTRA SERVER # # name: Create a logical device cdot65.apstra.design: # define server connectivity options server: apstra.dmz.home port: 443 validate_certs: False api_token: \u201cexample123\u201d define design element (logical device) # type: \u201clogical-devices\u201d display_name: \u201ccicd_test\u201d panels: - panel_layout: row_count: 1 column_count: 12 port_indexing: order: \u201cT-B, L-R\u201d schema: \u201cabsolute\u201d start_index: 1 port_groups: - count: 12 roles: - leaf speed: value: 10 unit: \u201cG\u201d state whether you want to create or delete this resource # state: present store the output of our task as a new variable to debug later # register: cicd_test_logical_device # # CREATE A NEW INTERFACE MAPPING ON APSTRA SERVER # # name: Create an interface mapping cdot65.apstra.design: # define server connectivity options server: apstra.dmz.home port: 443 validate_certs: False api_token: \u201cexample123\u201d define design element (logical device) # type: \u201cinterface-maps\u201d label: \u201ccicd_test\u201d logical_device_id: \u201ccicd_test\u201d device_profile_id: \u201cJuniper_vQFX\u201d interfaces: - name: \u201cxe-0/0/0\u201d roles: - leaf mapping: - 1 - 1 - 1 - 1 - 1 state: \u201cactive\u201d setting: param: \u201c{\"interface\": {\"speed\": \"\"}, \"global\": {\"speed\": \"\"}}\u201d position: 1 speed: unit: \u201cG\u201d value: 10 name: \u201cxe-0/0/11\u201d roles: - leaf mapping: - 12 - 1 - 1 - 1 - 12 state: \u201cactive\u201d setting: param: \u201c{\"interface\": {\"speed\": \"\"}, \"global\": {\"speed\": \"\"}}\u201d position: 12 speed: unit: \u201cG\u201d value: 10 state whether you want to create or delete this resource # state: present store the output of our task as a new variable to debug later # register: cicd_test_interface_maps # # CREATE A NEW RACK TYPE ON APSTRA SERVER # # name: Create a Rack Type cdot65.apstra.design: # define server connectivity options server: apstra.dmz.home port: 443 validate_certs: False api_token: \u201cexample123\u201d define design element (logical device) # type: \u201crack-types\u201d label: \u201ccicd_test\u201d access_switches: [] description: cicd_test display_name: cicd_test id: cicd_test leafs: - link_per_spine_count: 1 redundancy_protocol: leaf_leaf_link_speed: external_router_links: [] leaf_leaf_l3_link_count: 0 leaf_leaf_l3_link_speed: link_per_spine_speed: unit: G value: 10 external_router_facing: false label: cicd_test leaf_leaf_l3_link_port_channel_id: 0 leaf_leaf_link_port_channel_id: 0 logical_device: \u201ccicd_test\u201d leaf_leaf_link_count: 0 logical_devices: - display_name: AOS-1x10-1 id: AOS-1x10-1 panels: - panel_layout: row_count: 1 column_count: 1 port_indexing: order: T-B, L-R start_index: 1 schema: absolute port_groups: - count: 1 speed: unit: G value: 10 roles: - leaf - access - display_name: vqfx_leaf id: \u201ccicd_test\u201d panels: - panel_layout: row_count: 1 column_count: 12 port_indexing: order: T-B, L-R start_index: 1 schema: absolute port_groups: - count: 4 speed: unit: G value: 10 roles: - spine - count: 7 speed: unit: G value: 10 roles: - l2_server - access - l3_server - count: 1 speed: unit: G value: 10 roles: - external_router servers: - count: 1 ip_version: ipv4 port_channel_id_min: 0 port_channel_id_max: 0 connectivity_type: l2 links: - link_per_switch_count: 1 link_speed: unit: G value: 10 target_switch_label: cicd_test lag_mode: leaf_peer: attachment_type: singleAttached label: cicd_test label: cicd_test logical_device: AOS-1x10-1 state whether you want to create or delete this resource # state: present store the output of our task as a new variable to debug later # register: cicd_test_rack_type ``` Data Model # If you\u2019d like to see the options available for you within the module, have a look at the data model provided below. py title=\"cdot65/apstra/plugins/module_utils/apstra/api.py\" @staticmethod def design_spec(): return dict( access_switches=dict( required=False, type='list', elements='str' ), api_token=dict( required=True, fallback=( env_fallback, [ 'APSTRA_API_TOKEN', 'APSTRA_API_TOKEN', 'API_TOKEN' ] ), no_log=True, type='str' ), description=dict( required=False, type='str' ), device_profile_id=dict( required=False, type='str' ), display_name=dict( required=True, fallback=( env_fallback, [ 'APSTRA_USERNAME', 'APSTRA_USERNAME', 'USERNAME' ] ), type='str' ), id=dict( required=False, type='str' ), interfaces=dict( required=False, type='list', elements='dict', options=dict( mapping=dict( required=True, type='list', elements='int' ), name=dict( required=True, type='str', ), position=dict( required=True, type='int', ), roles=dict( required=True, type='list', elements='str' ), setting=dict( required=True, type='dict', options=dict( param=dict( required=False, type='str' ), ) ), speed=dict( required=True, type='dict', options=dict( unit=dict( required=False, type='str' ), value=dict( required=False, type='int' ), ) ), state=dict( required=True, type='str', ), ), ), label=dict( required=False, type='str' ), leafs=dict( required=False, type='list', elements='dict', options=dict( external_router_facing=dict( required=True, type='bool', ), external_router_links=dict( required=True, type='list', elements='str' ), label=dict( required=False, type='str', ), leaf_leaf_l3_link_count=dict( required=False, type='int', ), leaf_leaf_l3_link_port_channel_id=dict( required=False, type='int', ), leaf_leaf_l3_link_speed=dict( required=False, type='str', ), leaf_leaf_link_count=dict( required=False, type='int', ), leaf_leaf_link_port_channel_id=dict( required=False, type='int', ), leaf_leaf_link_speed=dict( required=False, type='str', ), link_per_spine_count=dict( required=False, type='int', ), link_per_spine_speed=dict( required=True, type='dict', options=dict( unit=dict( required=False, type='str' ), value=dict( required=False, type='int' ) ) ), logical_device=dict( required=False, type='str', ), redundancy_protocol=dict( required=False, type='str', ), ), ), logical_devices=dict( required=False, type='list', elements='dict', options=dict( display_name=dict( required=True, type='str', ), id=dict( required=True, type='str', ), panels=dict( required=False, type='list', elements='dict', options=dict( panel_layout=dict( required=True, type='dict', options=dict( row_count=dict( required=False, type='int' ), column_count=dict( required=False, type='int' ), ) ), port_indexing=dict( required=True, type='dict', options=dict( order=dict( required=False, type='str' ), start_index=dict( required=False, type='int' ), schema=dict( required=False, type='str' ), ) ), port_groups=dict( required=False, type='list', elements='dict', options=dict( count=dict( required=False, type='int' ), roles=dict( required=False, type='list', elements='str' ), speed=dict( required=True, type='dict', options=dict( unit=dict( required=False, type='str' ), value=dict( required=False, type='int' ), ) ), ), ), ), ), ), ), logical_device_id=dict( required=False, type='str' ), name=dict( required=False, type='str' ), panels=dict( required=False, type='list', elements='dict', options=dict( panel_layout=dict( required=True, type='dict', options=dict( row_count=dict( required=False, type='int' ), column_count=dict( required=False, type='int' ), ) ), port_indexing=dict( required=True, type='dict', options=dict( order=dict( required=False, type='str' ), schema=dict( required=False, type='str' ), start_index=dict( required=False, type='int' ), ), ), port_groups=dict( required=True, type='list', elements='dict', options=dict( count=dict( required=False, type='int' ), roles=dict( required=False, type='list', elements='str' ), speed=dict( required=False, type='dict', options=dict( value=dict( required=False, type='int' ), unit=dict( required=False, type='str' ), ), ), ), ), ), ), port=dict( required=False, type='int' ), server=dict( required=False, type='str' ), servers=dict( required=False, type='list', elements='dict', options=dict( connectivity_type=dict( required=True, type='str', ), count=dict( required=True, type='int', ), label=dict( required=True, type='str', ), logical_device=dict( required=True, type='str', ), ip_version=dict( required=True, type='str', ), port_channel_id_min=dict( required=True, type='int', ), port_channel_id_max=dict( required=True, type='int', ), links=dict( required=False, type='list', elements='dict', options=dict( attachment_type=dict( required=False, type='str' ), label=dict( required=False, type='str' ), lag_mode=dict( required=False, type='str' ), leaf_peer=dict( required=False, type='str' ), link_per_switch_count=dict( required=False, type='int' ), link_speed=dict( required=True, type='dict', options=dict( unit=dict( required=False, type='str' ), value=dict( required=False, type='int' ), ) ), target_switch_label=dict( required=False, type='str' ), ), ), ), ), state=dict( required=True, choices=[ 'absent', 'present' ], type='str' ), design_template=dict( required=False, type='dict', options=dict( asn_allocation_policy=dict( required=False, type='dict', options=dict( spine_asn_scheme=dict( required=False, type='str' ) ) ), dhcp_service_intent=dict( required=False, type='dict', options=dict( active=dict( required=False, type='bool' ) ) ), display_name=dict( required=True, type='str' ), external_routing_policy=dict( required=False, type='dict', options=dict( export_policy=dict( required=False, type='dict', options=dict( all_routes=dict( required=False, type='bool' ), l2edge_subnets=dict( required=False, type='bool' ), l3edge_server_links=dict( required=False, type='bool' ), loopbacks=dict( required=False, type='bool' ), spine_leaf_links=dict( required=False, type='bool' ), ) ), import_policy=dict( required=False, type='str' ) ) ), fabric_addressing_policy=dict( required=False, type='dict', options=dict( spine_leaf_links=dict( required=False, type='str' ) ) ), rack_type_counts=dict( required=False, type='list', elements='dict', options=dict( count=dict( required=False, type='int' ), rack_type_id=dict( required=False, type='str' ), ) ), rack_types=dict( required=False, type='list', elements='dict', options=dict( access_switches=dict( required=False, type='list', elements='str' ), description=dict( required=False, type='str' ), display_name=dict( required=False, type='str' ), id=dict( required=False, type='str' ), leafs=dict( required=False, type='list', elements='dict', options=dict( external_router_facing=dict( required=False, type='bool' ), external_router_links=dict( required=False, type='list', elements='str' ), label=dict( required=False, type='str' ), leaf_leaf_l3_link_count=dict( required=False, type='int' ), leaf_leaf_l3_link_port_channel_id=dict( required=False, type='int' ), leaf_leaf_l3_link_speed=dict( required=False, type='str' ), leaf_leaf_link_count=dict( required=False, type='int' ), leaf_leaf_link_port_channel_id=dict( required=False, type='int' ), leaf_leaf_link_speed=dict( required=False, type='str' ), link_per_spine_count=dict( required=False, type='int' ), link_per_spine_speed=dict( required=False, type='dict', options=dict( unit=dict( type='str', required=False ), value=dict( type='int', required=False ) ) ), logical_device=dict( required=True, type='str' ), redundancy_protocol=dict( required=False, type='str' ), ) ), logical_devices=dict( required=False, type='list', elements='dict', options=dict( display_name=dict( required=True, type='str' ), id=dict( required=True, type='str' ), panels=dict( required=False, type='list', elements='dict', options=dict( panel_layout=dict( required=False, type='dict', options=dict( column_count=dict( required=False, type='int' ), row_count=dict( required=False, type='int' ) ) ), port_groups=dict( required=False, type='list', elements='dict', options=dict( count=dict( required=False, type='int' ), roles=dict( required=False, type='list', elements='str' ), speed=dict( required=False, type='dict', options=dict( unit=dict( required=False, type='str' ), value=dict( required=False, type='int' ), ) ), ) ), port_indexing=dict( required=True, type='dict', options=dict( order=dict( required=True, type='str' ), schema=dict( required=True, type='str' ), start_index=dict( required=True, type='int' ), ) ) ) ) ) ), servers=dict( required=True, type='list', elements='dict', options=dict( connectivity_type=dict( type='str', required=True ), count=dict( type='int', required=True ), ip_version=dict( type='str', required=True ), label=dict( type='str', required=True ), links=dict( required=True, type='list', elements='dict', options=dict( attachment_type=dict( type='str', required=True ), label=dict( type='str', required=True ), lag_mode=dict( type='str', required=False ), link_per_switch_count=dict( type='int', required=False ), link_speed=dict( required=True, type='dict', options=dict( unit=dict( type='str', required=False ), value=dict( type='int', required=False ) ) ), target_switch_label=dict( type='str', required=True ) ) ), logical_device=dict( type='str', required=True ), port_channel_id_max=dict( type='int', required=False ), port_channel_id_min=dict( type='int', required=False ) ) ) ) ), spine=dict( required=True, type='dict', options=dict( count=dict( required=True, type='int' ), external_link_count=dict( required=True, type='int' ), external_link_speed=dict( required=True, type='str' ), link_per_superspine_count=dict( required=True, type='int' ), link_per_superspine_speed=dict( required=True, type='str' ), logical_device=dict( required=True, type='dict', options=dict( display_name=dict( required=True, type='str' ), id=dict( required=True, type='str' ), panels=dict( required=False, type='list', elements='dict', options=dict( panel_layout=dict( required=False, type='dict', options=dict( column_count=dict( required=False, type='int' ), row_count=dict( required=False, type='int' ) ) ), port_groups=dict( required=False, type='list', elements='dict', options=dict( count=dict( required=False, type='int' ), roles=dict( required=False, type='list', elements='str' ), speed=dict( required=False, type='dict', options=dict( unit=dict( required=False, type='str' ), value=dict( required=False, type='int' ) ) ) ) ), port_indexing=dict( required=False, type='dict', options=dict( order=dict( type='str', required=False ), schema=dict( type='str', required=False ), start_index=dict( type='int', required=False ) ) ) ) ) ) ) ) ), type=dict( required=True, type='str' ), virtual_network_policy=dict( required=True, type='dict', options=dict( overlay_control_protocol=dict( required=True, type='str' ) ) ) ) ), type=dict( required=True, choices=[ 'logical-devices', 'interface-maps', 'rack-types', 'templates' ], type='str' ), validate_certs=dict( type='bool', required=False, default=False ), ) This page is automatically generated","title":"design"},{"location":"design/#cdotapstradesign","text":"","title":"cdot.apstra.design"},{"location":"design/#design","text":"You will find all repositories related to design on this page.","title":"design"},{"location":"design/#manage-your-designs","text":"This module will allow you to manage your design elements within Apstra. Feature set as of version 0.0.1: manage Logical Devices, Rack Types, Templates, Intereface Mapping idempotent","title":"Manage your designs"},{"location":"design/#supported-resources","text":"Suported Resources: Design Element type Interface Mapping interface-maps Logical Device logical-devices Rack Types rack-types Templates templates","title":"Supported resources"},{"location":"design/#example","text":"Here is a basic example of using the module to mange your designs in Apstra","title":"Example"},{"location":"design/#yaml-titlecdot65apstrateststestsyaml","text":"","title":"``` yaml title=\"cdot65/apstra/tests/tests.yaml\""},{"location":"design/#_1","text":"","title":""},{"location":"design/#create-design-play","text":"","title":"# CREATE DESIGN PLAY"},{"location":"design/#_2","text":"hosts: localhost gather_facts: False become: False tasks: ### ################################################################# ### # AUTHENTICATE AND RECEIVE AN API TOKEN FROM THE APSTRA SERVER ### ################################################################# name: retrieve an API token for our session ansible.builtin.uri: url: https://apstra.dmz.home/api/user/login method: POST headers: Content-Type: application/json status_code: 201 validate_certs: False body_format: json body: username: apstra password: apstra123 register: api_token name: create \u2018api_token\u2019 object by setting it equal to value in response ansible.builtin.set_fact: api_token: \u201cexample123\u201d","title":""},{"location":"design/#_3","text":"","title":""},{"location":"design/#create-a-new-logical-device-on-apstra-server","text":"","title":"# CREATE A NEW LOGICAL DEVICE ON APSTRA SERVER"},{"location":"design/#_4","text":"name: Create a logical device cdot65.apstra.design: # define server connectivity options server: apstra.dmz.home port: 443 validate_certs: False api_token: \u201cexample123\u201d","title":""},{"location":"design/#define-design-element-logical-device","text":"type: \u201clogical-devices\u201d display_name: \u201ccicd_test\u201d panels: - panel_layout: row_count: 1 column_count: 12 port_indexing: order: \u201cT-B, L-R\u201d schema: \u201cabsolute\u201d start_index: 1 port_groups: - count: 12 roles: - leaf speed: value: 10 unit: \u201cG\u201d","title":"define design element (logical device)"},{"location":"design/#state-whether-you-want-to-create-or-delete-this-resource","text":"state: present","title":"state whether you want to create or delete this resource"},{"location":"design/#store-the-output-of-our-task-as-a-new-variable-to-debug-later","text":"register: cicd_test_logical_device","title":"store the output of our task as a new variable to debug later"},{"location":"design/#_5","text":"","title":""},{"location":"design/#create-a-new-interface-mapping-on-apstra-server","text":"","title":"# CREATE A NEW INTERFACE MAPPING ON APSTRA SERVER"},{"location":"design/#_6","text":"name: Create an interface mapping cdot65.apstra.design: # define server connectivity options server: apstra.dmz.home port: 443 validate_certs: False api_token: \u201cexample123\u201d","title":""},{"location":"design/#define-design-element-logical-device_1","text":"type: \u201cinterface-maps\u201d label: \u201ccicd_test\u201d logical_device_id: \u201ccicd_test\u201d device_profile_id: \u201cJuniper_vQFX\u201d interfaces: - name: \u201cxe-0/0/0\u201d roles: - leaf mapping: - 1 - 1 - 1 - 1 - 1 state: \u201cactive\u201d setting: param: \u201c{\"interface\": {\"speed\": \"\"}, \"global\": {\"speed\": \"\"}}\u201d position: 1 speed: unit: \u201cG\u201d value: 10 name: \u201cxe-0/0/11\u201d roles: - leaf mapping: - 12 - 1 - 1 - 1 - 12 state: \u201cactive\u201d setting: param: \u201c{\"interface\": {\"speed\": \"\"}, \"global\": {\"speed\": \"\"}}\u201d position: 12 speed: unit: \u201cG\u201d value: 10","title":"define design element (logical device)"},{"location":"design/#state-whether-you-want-to-create-or-delete-this-resource_1","text":"state: present","title":"state whether you want to create or delete this resource"},{"location":"design/#store-the-output-of-our-task-as-a-new-variable-to-debug-later_1","text":"register: cicd_test_interface_maps","title":"store the output of our task as a new variable to debug later"},{"location":"design/#_7","text":"","title":""},{"location":"design/#create-a-new-rack-type-on-apstra-server","text":"","title":"# CREATE A NEW RACK TYPE ON APSTRA SERVER"},{"location":"design/#_8","text":"name: Create a Rack Type cdot65.apstra.design: # define server connectivity options server: apstra.dmz.home port: 443 validate_certs: False api_token: \u201cexample123\u201d","title":""},{"location":"design/#define-design-element-logical-device_2","text":"type: \u201crack-types\u201d label: \u201ccicd_test\u201d access_switches: [] description: cicd_test display_name: cicd_test id: cicd_test leafs: - link_per_spine_count: 1 redundancy_protocol: leaf_leaf_link_speed: external_router_links: [] leaf_leaf_l3_link_count: 0 leaf_leaf_l3_link_speed: link_per_spine_speed: unit: G value: 10 external_router_facing: false label: cicd_test leaf_leaf_l3_link_port_channel_id: 0 leaf_leaf_link_port_channel_id: 0 logical_device: \u201ccicd_test\u201d leaf_leaf_link_count: 0 logical_devices: - display_name: AOS-1x10-1 id: AOS-1x10-1 panels: - panel_layout: row_count: 1 column_count: 1 port_indexing: order: T-B, L-R start_index: 1 schema: absolute port_groups: - count: 1 speed: unit: G value: 10 roles: - leaf - access - display_name: vqfx_leaf id: \u201ccicd_test\u201d panels: - panel_layout: row_count: 1 column_count: 12 port_indexing: order: T-B, L-R start_index: 1 schema: absolute port_groups: - count: 4 speed: unit: G value: 10 roles: - spine - count: 7 speed: unit: G value: 10 roles: - l2_server - access - l3_server - count: 1 speed: unit: G value: 10 roles: - external_router servers: - count: 1 ip_version: ipv4 port_channel_id_min: 0 port_channel_id_max: 0 connectivity_type: l2 links: - link_per_switch_count: 1 link_speed: unit: G value: 10 target_switch_label: cicd_test lag_mode: leaf_peer: attachment_type: singleAttached label: cicd_test label: cicd_test logical_device: AOS-1x10-1","title":"define design element (logical device)"},{"location":"design/#state-whether-you-want-to-create-or-delete-this-resource_2","text":"state: present","title":"state whether you want to create or delete this resource"},{"location":"design/#store-the-output-of-our-task-as-a-new-variable-to-debug-later_2","text":"register: cicd_test_rack_type ```","title":"store the output of our task as a new variable to debug later"},{"location":"design/#data-model","text":"If you\u2019d like to see the options available for you within the module, have a look at the data model provided below. py title=\"cdot65/apstra/plugins/module_utils/apstra/api.py\" @staticmethod def design_spec(): return dict( access_switches=dict( required=False, type='list', elements='str' ), api_token=dict( required=True, fallback=( env_fallback, [ 'APSTRA_API_TOKEN', 'APSTRA_API_TOKEN', 'API_TOKEN' ] ), no_log=True, type='str' ), description=dict( required=False, type='str' ), device_profile_id=dict( required=False, type='str' ), display_name=dict( required=True, fallback=( env_fallback, [ 'APSTRA_USERNAME', 'APSTRA_USERNAME', 'USERNAME' ] ), type='str' ), id=dict( required=False, type='str' ), interfaces=dict( required=False, type='list', elements='dict', options=dict( mapping=dict( required=True, type='list', elements='int' ), name=dict( required=True, type='str', ), position=dict( required=True, type='int', ), roles=dict( required=True, type='list', elements='str' ), setting=dict( required=True, type='dict', options=dict( param=dict( required=False, type='str' ), ) ), speed=dict( required=True, type='dict', options=dict( unit=dict( required=False, type='str' ), value=dict( required=False, type='int' ), ) ), state=dict( required=True, type='str', ), ), ), label=dict( required=False, type='str' ), leafs=dict( required=False, type='list', elements='dict', options=dict( external_router_facing=dict( required=True, type='bool', ), external_router_links=dict( required=True, type='list', elements='str' ), label=dict( required=False, type='str', ), leaf_leaf_l3_link_count=dict( required=False, type='int', ), leaf_leaf_l3_link_port_channel_id=dict( required=False, type='int', ), leaf_leaf_l3_link_speed=dict( required=False, type='str', ), leaf_leaf_link_count=dict( required=False, type='int', ), leaf_leaf_link_port_channel_id=dict( required=False, type='int', ), leaf_leaf_link_speed=dict( required=False, type='str', ), link_per_spine_count=dict( required=False, type='int', ), link_per_spine_speed=dict( required=True, type='dict', options=dict( unit=dict( required=False, type='str' ), value=dict( required=False, type='int' ) ) ), logical_device=dict( required=False, type='str', ), redundancy_protocol=dict( required=False, type='str', ), ), ), logical_devices=dict( required=False, type='list', elements='dict', options=dict( display_name=dict( required=True, type='str', ), id=dict( required=True, type='str', ), panels=dict( required=False, type='list', elements='dict', options=dict( panel_layout=dict( required=True, type='dict', options=dict( row_count=dict( required=False, type='int' ), column_count=dict( required=False, type='int' ), ) ), port_indexing=dict( required=True, type='dict', options=dict( order=dict( required=False, type='str' ), start_index=dict( required=False, type='int' ), schema=dict( required=False, type='str' ), ) ), port_groups=dict( required=False, type='list', elements='dict', options=dict( count=dict( required=False, type='int' ), roles=dict( required=False, type='list', elements='str' ), speed=dict( required=True, type='dict', options=dict( unit=dict( required=False, type='str' ), value=dict( required=False, type='int' ), ) ), ), ), ), ), ), ), logical_device_id=dict( required=False, type='str' ), name=dict( required=False, type='str' ), panels=dict( required=False, type='list', elements='dict', options=dict( panel_layout=dict( required=True, type='dict', options=dict( row_count=dict( required=False, type='int' ), column_count=dict( required=False, type='int' ), ) ), port_indexing=dict( required=True, type='dict', options=dict( order=dict( required=False, type='str' ), schema=dict( required=False, type='str' ), start_index=dict( required=False, type='int' ), ), ), port_groups=dict( required=True, type='list', elements='dict', options=dict( count=dict( required=False, type='int' ), roles=dict( required=False, type='list', elements='str' ), speed=dict( required=False, type='dict', options=dict( value=dict( required=False, type='int' ), unit=dict( required=False, type='str' ), ), ), ), ), ), ), port=dict( required=False, type='int' ), server=dict( required=False, type='str' ), servers=dict( required=False, type='list', elements='dict', options=dict( connectivity_type=dict( required=True, type='str', ), count=dict( required=True, type='int', ), label=dict( required=True, type='str', ), logical_device=dict( required=True, type='str', ), ip_version=dict( required=True, type='str', ), port_channel_id_min=dict( required=True, type='int', ), port_channel_id_max=dict( required=True, type='int', ), links=dict( required=False, type='list', elements='dict', options=dict( attachment_type=dict( required=False, type='str' ), label=dict( required=False, type='str' ), lag_mode=dict( required=False, type='str' ), leaf_peer=dict( required=False, type='str' ), link_per_switch_count=dict( required=False, type='int' ), link_speed=dict( required=True, type='dict', options=dict( unit=dict( required=False, type='str' ), value=dict( required=False, type='int' ), ) ), target_switch_label=dict( required=False, type='str' ), ), ), ), ), state=dict( required=True, choices=[ 'absent', 'present' ], type='str' ), design_template=dict( required=False, type='dict', options=dict( asn_allocation_policy=dict( required=False, type='dict', options=dict( spine_asn_scheme=dict( required=False, type='str' ) ) ), dhcp_service_intent=dict( required=False, type='dict', options=dict( active=dict( required=False, type='bool' ) ) ), display_name=dict( required=True, type='str' ), external_routing_policy=dict( required=False, type='dict', options=dict( export_policy=dict( required=False, type='dict', options=dict( all_routes=dict( required=False, type='bool' ), l2edge_subnets=dict( required=False, type='bool' ), l3edge_server_links=dict( required=False, type='bool' ), loopbacks=dict( required=False, type='bool' ), spine_leaf_links=dict( required=False, type='bool' ), ) ), import_policy=dict( required=False, type='str' ) ) ), fabric_addressing_policy=dict( required=False, type='dict', options=dict( spine_leaf_links=dict( required=False, type='str' ) ) ), rack_type_counts=dict( required=False, type='list', elements='dict', options=dict( count=dict( required=False, type='int' ), rack_type_id=dict( required=False, type='str' ), ) ), rack_types=dict( required=False, type='list', elements='dict', options=dict( access_switches=dict( required=False, type='list', elements='str' ), description=dict( required=False, type='str' ), display_name=dict( required=False, type='str' ), id=dict( required=False, type='str' ), leafs=dict( required=False, type='list', elements='dict', options=dict( external_router_facing=dict( required=False, type='bool' ), external_router_links=dict( required=False, type='list', elements='str' ), label=dict( required=False, type='str' ), leaf_leaf_l3_link_count=dict( required=False, type='int' ), leaf_leaf_l3_link_port_channel_id=dict( required=False, type='int' ), leaf_leaf_l3_link_speed=dict( required=False, type='str' ), leaf_leaf_link_count=dict( required=False, type='int' ), leaf_leaf_link_port_channel_id=dict( required=False, type='int' ), leaf_leaf_link_speed=dict( required=False, type='str' ), link_per_spine_count=dict( required=False, type='int' ), link_per_spine_speed=dict( required=False, type='dict', options=dict( unit=dict( type='str', required=False ), value=dict( type='int', required=False ) ) ), logical_device=dict( required=True, type='str' ), redundancy_protocol=dict( required=False, type='str' ), ) ), logical_devices=dict( required=False, type='list', elements='dict', options=dict( display_name=dict( required=True, type='str' ), id=dict( required=True, type='str' ), panels=dict( required=False, type='list', elements='dict', options=dict( panel_layout=dict( required=False, type='dict', options=dict( column_count=dict( required=False, type='int' ), row_count=dict( required=False, type='int' ) ) ), port_groups=dict( required=False, type='list', elements='dict', options=dict( count=dict( required=False, type='int' ), roles=dict( required=False, type='list', elements='str' ), speed=dict( required=False, type='dict', options=dict( unit=dict( required=False, type='str' ), value=dict( required=False, type='int' ), ) ), ) ), port_indexing=dict( required=True, type='dict', options=dict( order=dict( required=True, type='str' ), schema=dict( required=True, type='str' ), start_index=dict( required=True, type='int' ), ) ) ) ) ) ), servers=dict( required=True, type='list', elements='dict', options=dict( connectivity_type=dict( type='str', required=True ), count=dict( type='int', required=True ), ip_version=dict( type='str', required=True ), label=dict( type='str', required=True ), links=dict( required=True, type='list', elements='dict', options=dict( attachment_type=dict( type='str', required=True ), label=dict( type='str', required=True ), lag_mode=dict( type='str', required=False ), link_per_switch_count=dict( type='int', required=False ), link_speed=dict( required=True, type='dict', options=dict( unit=dict( type='str', required=False ), value=dict( type='int', required=False ) ) ), target_switch_label=dict( type='str', required=True ) ) ), logical_device=dict( type='str', required=True ), port_channel_id_max=dict( type='int', required=False ), port_channel_id_min=dict( type='int', required=False ) ) ) ) ), spine=dict( required=True, type='dict', options=dict( count=dict( required=True, type='int' ), external_link_count=dict( required=True, type='int' ), external_link_speed=dict( required=True, type='str' ), link_per_superspine_count=dict( required=True, type='int' ), link_per_superspine_speed=dict( required=True, type='str' ), logical_device=dict( required=True, type='dict', options=dict( display_name=dict( required=True, type='str' ), id=dict( required=True, type='str' ), panels=dict( required=False, type='list', elements='dict', options=dict( panel_layout=dict( required=False, type='dict', options=dict( column_count=dict( required=False, type='int' ), row_count=dict( required=False, type='int' ) ) ), port_groups=dict( required=False, type='list', elements='dict', options=dict( count=dict( required=False, type='int' ), roles=dict( required=False, type='list', elements='str' ), speed=dict( required=False, type='dict', options=dict( unit=dict( required=False, type='str' ), value=dict( required=False, type='int' ) ) ) ) ), port_indexing=dict( required=False, type='dict', options=dict( order=dict( type='str', required=False ), schema=dict( type='str', required=False ), start_index=dict( type='int', required=False ) ) ) ) ) ) ) ) ), type=dict( required=True, type='str' ), virtual_network_policy=dict( required=True, type='dict', options=dict( overlay_control_protocol=dict( required=True, type='str' ) ) ) ) ), type=dict( required=True, choices=[ 'logical-devices', 'interface-maps', 'rack-types', 'templates' ], type='str' ), validate_certs=dict( type='bool', required=False, default=False ), ) This page is automatically generated","title":"Data Model"},{"location":"resources/","text":"cdot.apstra.resources # resources # You will find all repositories related to resources on this page. Manage your Blueprints # This module will allow you to manage your resources within AIS. Feature set as of version 0.0.1: manage all resources supports tagging idempotent Supported resources # Suported Resources: Resource Type type ASN Pool asn-pools IPv4 Pool ip-pools IPv6 Pool ipv6-pools VNI Pool vni-pools Example # Here is a basic example of using the module to mange your resources in Apstra ``` yaml title=\u201dcdot65/apstra/tests/tests.yaml\u201d # # # CREATE RESOURCES PLAY # # hosts: localhost gather_facts: False become: False tasks: ### ################################################################# ### # AUTHENTICATE AND RECEIVE AN API TOKEN FROM THE APSTRA SERVER ### ################################################################# name: retrieve an API token for our session ansible.builtin.uri: url: https://apstra.dmz.home/api/user/login method: POST headers: Content-Type: application/json status_code: 201 validate_certs: False body_format: json body: username: apstra password: apstra123 register: api_token name: create \u2018api_token\u2019 object by setting it equal to value in response ansible.builtin.set_fact: api_token: \u201cexample123\u201d # # CREATE IP POOL RESOURCES ON APSTRA SERVER # # name: Create an IP Pool Resource with two prefixes cdot65.apstra.resources: # define server connectivity options server: apstra.dmz.home port: 443 validate_certs: False api_token: \u201cexample123\u201d define resource allocations # display_name: \u201ccicd_test\u201d tags: [] type: \u201cip-pools\u201d subnets: - \u201c100.1.1.0/24\u201d - \u201c100.1.2.0/24\u201d state whether you want to create or delete this resource # state: present store the output of our task as a new variable to debug later # register: cicd_test_ippool # # CREATE IPv6 POOL RESOURCES ON APSTRA SERVER # # name: Create an IPv6 Pool Resource with two prefixes cdot65.apstra.resources: # define server connectivity options server: apstra.dmz.home port: 443 validate_certs: False api_token: \u201cexample123\u201d define resource allocations # display_name: \u201ccicd_test\u201d tags: [] type: \u201cipv6-pools\u201d subnets: - \u201c2001:db8::192:168:10:251/112\u201d - \u201c2001:db8::192:168:20:251/112\u201d state whether you want to create or delete this resource # state: present store the output of our task as a new variable to debug later # register: cicd_test_ippool # # CREATE ASN POOL RESOURCES ON APSTRA SERVER # # name: Create an ASN Pool Resource with two ranges cdot65.apstra.resources: # define server connectivity options server: apstra.dmz.home port: 443 validate_certs: False api_token: \u201cexample123\u201d define resource allocations # display_name: \u201ccicd_test\u201d tags: [] type: \u201casn-pools\u201d ranges: - first: 65300 last: 65399 - first: 65500 last: 65599 state whether you want to create or delete this resource # state: present store the output of our task as a new variable to debug later # register: cicd_test_asn_pool # # CREATE VNI POOL RESOURCES ON APSTRA SERVER # # name: Create an VNI Pool Resource with two ranges cdot65.apstra.resources: # define server connectivity options server: apstra.dmz.home port: 443 validate_certs: False api_token: \u201cexample123\u201d define resource allocations # display_name: \u201ccicd_test\u201d tags: [] type: \u201cvni-pools\u201d ranges: - first: 65300 last: 65399 - first: 65500 last: 65599 state whether you want to create or delete this resource # state: present store the output of our task as a new variable to debug later # register: cicd_test_vni_pool ``` Data Model # If you\u2019d like to see the options available for you within the module, have a look at the data model provided below. py title=\"cdot65/apstra/plugins/module_utils/apstra/api.py\" @staticmethod def resources_spec(): return dict( address=dict( required=False, type='str'), asn=dict( required=False, type='int'), api_token=dict( required=True, fallback=(env_fallback, ['APSTRA_API_TOKEN', 'APSTRA_API_TOKEN', 'API_TOKEN']), no_log=True, type='str'), display_name=dict( required=True, fallback=(env_fallback, ['APSTRA_USERNAME', 'APSTRA_USERNAME', 'USERNAME']), type='str'), ipv6_address=dict( required=False, type='str'), port=dict( required=True, type='int'), ranges=dict( required=False, type='list', elements='dict', options=dict( first=dict( required=True, type='int'), last=dict( required=True, type='int'), ), ), server=dict( required=False, type='str'), state=dict( required=False, choices=['absent', 'present'], type='str'), subnets=dict( required=False, type='list', elements='str'), tags=dict( required=False, type='list', elements='str'), type=dict( required=True, choices=['asn-pools', 'ip-pools', 'ipv6-pools', 'vni-pools'], type='str'), validate_certs=dict( type='bool', required=False, default=False), ) This page is automatically generated","title":"resources"},{"location":"resources/#cdotapstraresources","text":"","title":"cdot.apstra.resources"},{"location":"resources/#resources","text":"You will find all repositories related to resources on this page.","title":"resources"},{"location":"resources/#manage-your-blueprints","text":"This module will allow you to manage your resources within AIS. Feature set as of version 0.0.1: manage all resources supports tagging idempotent","title":"Manage your Blueprints"},{"location":"resources/#supported-resources","text":"Suported Resources: Resource Type type ASN Pool asn-pools IPv4 Pool ip-pools IPv6 Pool ipv6-pools VNI Pool vni-pools","title":"Supported resources"},{"location":"resources/#example","text":"Here is a basic example of using the module to mange your resources in Apstra","title":"Example"},{"location":"resources/#yaml-titlecdot65apstrateststestsyaml","text":"","title":"``` yaml title=\"cdot65/apstra/tests/tests.yaml\""},{"location":"resources/#_1","text":"","title":""},{"location":"resources/#create-resources-play","text":"","title":"# CREATE RESOURCES PLAY"},{"location":"resources/#_2","text":"hosts: localhost gather_facts: False become: False tasks: ### ################################################################# ### # AUTHENTICATE AND RECEIVE AN API TOKEN FROM THE APSTRA SERVER ### ################################################################# name: retrieve an API token for our session ansible.builtin.uri: url: https://apstra.dmz.home/api/user/login method: POST headers: Content-Type: application/json status_code: 201 validate_certs: False body_format: json body: username: apstra password: apstra123 register: api_token name: create \u2018api_token\u2019 object by setting it equal to value in response ansible.builtin.set_fact: api_token: \u201cexample123\u201d","title":""},{"location":"resources/#_3","text":"","title":""},{"location":"resources/#create-ip-pool-resources-on-apstra-server","text":"","title":"# CREATE IP POOL RESOURCES ON APSTRA SERVER"},{"location":"resources/#_4","text":"name: Create an IP Pool Resource with two prefixes cdot65.apstra.resources: # define server connectivity options server: apstra.dmz.home port: 443 validate_certs: False api_token: \u201cexample123\u201d","title":""},{"location":"resources/#define-resource-allocations","text":"display_name: \u201ccicd_test\u201d tags: [] type: \u201cip-pools\u201d subnets: - \u201c100.1.1.0/24\u201d - \u201c100.1.2.0/24\u201d","title":"define resource allocations"},{"location":"resources/#state-whether-you-want-to-create-or-delete-this-resource","text":"state: present","title":"state whether you want to create or delete this resource"},{"location":"resources/#store-the-output-of-our-task-as-a-new-variable-to-debug-later","text":"register: cicd_test_ippool","title":"store the output of our task as a new variable to debug later"},{"location":"resources/#_5","text":"","title":""},{"location":"resources/#create-ipv6-pool-resources-on-apstra-server","text":"","title":"# CREATE IPv6 POOL RESOURCES ON APSTRA SERVER"},{"location":"resources/#_6","text":"name: Create an IPv6 Pool Resource with two prefixes cdot65.apstra.resources: # define server connectivity options server: apstra.dmz.home port: 443 validate_certs: False api_token: \u201cexample123\u201d","title":""},{"location":"resources/#define-resource-allocations_1","text":"display_name: \u201ccicd_test\u201d tags: [] type: \u201cipv6-pools\u201d subnets: - \u201c2001:db8::192:168:10:251/112\u201d - \u201c2001:db8::192:168:20:251/112\u201d","title":"define resource allocations"},{"location":"resources/#state-whether-you-want-to-create-or-delete-this-resource_1","text":"state: present","title":"state whether you want to create or delete this resource"},{"location":"resources/#store-the-output-of-our-task-as-a-new-variable-to-debug-later_1","text":"register: cicd_test_ippool","title":"store the output of our task as a new variable to debug later"},{"location":"resources/#_7","text":"","title":""},{"location":"resources/#create-asn-pool-resources-on-apstra-server","text":"","title":"# CREATE ASN POOL RESOURCES ON APSTRA SERVER"},{"location":"resources/#_8","text":"name: Create an ASN Pool Resource with two ranges cdot65.apstra.resources: # define server connectivity options server: apstra.dmz.home port: 443 validate_certs: False api_token: \u201cexample123\u201d","title":""},{"location":"resources/#define-resource-allocations_2","text":"display_name: \u201ccicd_test\u201d tags: [] type: \u201casn-pools\u201d ranges: - first: 65300 last: 65399 - first: 65500 last: 65599","title":"define resource allocations"},{"location":"resources/#state-whether-you-want-to-create-or-delete-this-resource_2","text":"state: present","title":"state whether you want to create or delete this resource"},{"location":"resources/#store-the-output-of-our-task-as-a-new-variable-to-debug-later_2","text":"register: cicd_test_asn_pool","title":"store the output of our task as a new variable to debug later"},{"location":"resources/#_9","text":"","title":""},{"location":"resources/#create-vni-pool-resources-on-apstra-server","text":"","title":"# CREATE VNI POOL RESOURCES ON APSTRA SERVER"},{"location":"resources/#_10","text":"name: Create an VNI Pool Resource with two ranges cdot65.apstra.resources: # define server connectivity options server: apstra.dmz.home port: 443 validate_certs: False api_token: \u201cexample123\u201d","title":""},{"location":"resources/#define-resource-allocations_3","text":"display_name: \u201ccicd_test\u201d tags: [] type: \u201cvni-pools\u201d ranges: - first: 65300 last: 65399 - first: 65500 last: 65599","title":"define resource allocations"},{"location":"resources/#state-whether-you-want-to-create-or-delete-this-resource_3","text":"state: present","title":"state whether you want to create or delete this resource"},{"location":"resources/#store-the-output-of-our-task-as-a-new-variable-to-debug-later_3","text":"register: cicd_test_vni_pool ```","title":"store the output of our task as a new variable to debug later"},{"location":"resources/#data-model","text":"If you\u2019d like to see the options available for you within the module, have a look at the data model provided below. py title=\"cdot65/apstra/plugins/module_utils/apstra/api.py\" @staticmethod def resources_spec(): return dict( address=dict( required=False, type='str'), asn=dict( required=False, type='int'), api_token=dict( required=True, fallback=(env_fallback, ['APSTRA_API_TOKEN', 'APSTRA_API_TOKEN', 'API_TOKEN']), no_log=True, type='str'), display_name=dict( required=True, fallback=(env_fallback, ['APSTRA_USERNAME', 'APSTRA_USERNAME', 'USERNAME']), type='str'), ipv6_address=dict( required=False, type='str'), port=dict( required=True, type='int'), ranges=dict( required=False, type='list', elements='dict', options=dict( first=dict( required=True, type='int'), last=dict( required=True, type='int'), ), ), server=dict( required=False, type='str'), state=dict( required=False, choices=['absent', 'present'], type='str'), subnets=dict( required=False, type='list', elements='str'), tags=dict( required=False, type='list', elements='str'), type=dict( required=True, choices=['asn-pools', 'ip-pools', 'ipv6-pools', 'vni-pools'], type='str'), validate_certs=dict( type='bool', required=False, default=False), ) This page is automatically generated","title":"Data Model"}]}